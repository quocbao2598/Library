package com.management.library.demo.examples;

import org.springframework.stereotype.Service;

/**
 * üéì FILE DEMO CHI TI·∫æT - Gi·∫£i th√≠ch t·ª´ng kh√°i ni·ªám DI
 * 
 * File n√†y ch·ª©a c√°c v√≠ d·ª• th·ª±c t·∫ø ƒë·ªÉ hi·ªÉu r√µ c√°c kh√°i ni·ªám:
 * 1. Dependency l√† g√¨?
 * 2. Immutable Fields l√† sao?
 * 3. IoC qu·∫£n l√Ω DI nh∆∞ th·∫ø n√†o?
 * 4. Loose Coupling l√† g√¨?
 */
public class DetailedDIExamples {

    // ===============================================
    // 1. DEPENDENCY L√Ä G√å? - V√ç D·ª§ TH·ª∞C T·∫æ
    // ===============================================
    
    /**
     * üîó V√ç D·ª§ 1: DEPENDENCY TRONG ƒê·ªúI S·ªêNG
     * 
     * Gi·ªëng nh∆∞ trong ƒë·ªùi s·ªëng:
     * - Xe √¥ t√¥ PH·ª§ THU·ªòC v√†o xƒÉng ƒë·ªÉ ch·∫°y
     * - ƒêi·ªán tho·∫°i PH·ª§ THU·ªòC v√†o pin ƒë·ªÉ ho·∫°t ƒë·ªông
     * - Ng∆∞·ªùi PH·ª§ THU·ªòC v√†o th·ª©c ƒÉn ƒë·ªÉ s·ªëng
     * 
     * Trong l·∫≠p tr√¨nh:
     * - Class A c·∫ßn Class B ƒë·ªÉ ho·∫°t ƒë·ªông ‚Üí A PH·ª§ THU·ªòC v√†o B
     */
    
    // ‚ùå V√ç D·ª§ TR∆Ø·ªöC KHI C√ì DI - T·ª∞ T·∫†O DEPENDENCY
    static class BadBookController_WithoutDI {
        private BookService_Example bookService;
        
        public BadBookController_WithoutDI() {
            // ‚ùå T·ª± t·∫°o dependency - TIGHT COUPLING
            this.bookService = new BookService_Example();
            //     üëÜ ƒê√¢y ch√≠nh l√† DEPENDENCY!
            //     BookController PH·ª§ THU·ªòC v√†o BookService
            //     ƒë·ªÉ c√≥ th·ªÉ x·ª≠ l√Ω c√°c request v·ªÅ s√°ch
        }
        
        public String getAllBooks() {
            return bookService.findAllBooks(); // S·ª≠ d·ª•ng dependency
        }
    }
    
    // ‚úÖ V√ç D·ª§ SAU KHI C√ì DI - INJECT DEPENDENCY
    static class GoodBookController_WithDI {
        private final BookService_Example bookService; // IMMUTABLE FIELD
        
        // ‚úÖ Constructor injection - Spring s·∫Ω inject dependency
        public GoodBookController_WithDI(BookService_Example bookService) {
            this.bookService = bookService;
            //     üëÜ Dependency ƒë∆∞·ª£c INJECT t·ª´ b√™n ngo√†i
            //     Controller kh√¥ng t·ª± t·∫°o, ch·ªâ nh·∫≠n v√†o s·ª≠ d·ª•ng
        }
        
        public String getAllBooks() {
            return bookService.findAllBooks(); // S·ª≠ d·ª•ng dependency
        }
    }
    
    // ===============================================
    // 2. IMMUTABLE FIELDS L√Ä SAO? - V√ç D·ª§ CHI TI·∫æT
    // ===============================================
    
    /**
     * üîí IMMUTABLE = KH√îNG TH·ªÇ THAY ƒê·ªîI
     * 
     * V√≠ d·ª• th·ª±c t·∫ø:
     * - S·ªë CMND: M·ªôt khi c·∫•p th√¨ kh√¥ng ƒë·ªïi ƒë∆∞·ª£c (IMMUTABLE)
     * - M√†u t√≥c: C√≥ th·ªÉ nhu·ªôm ƒë·ªïi m√†u (MUTABLE)
     * - Ng√†y sinh: Kh√¥ng th·ªÉ thay ƒë·ªïi (IMMUTABLE)
     * - C√¢n n·∫∑ng: C√≥ th·ªÉ thay ƒë·ªïi (MUTABLE)
     */
    
    // ‚ùå MUTABLE FIELDS - C√ì TH·ªÇ THAY ƒê·ªîI
    static class MutableExample {
        private BookService_Example bookService; // Kh√¥ng c√≥ 'final'
        
        public MutableExample(BookService_Example bookService) {
            this.bookService = bookService;
        }
        
        // ‚ùå C√≥ th·ªÉ thay ƒë·ªïi dependency sau khi t·∫°o object
        public void changeService(BookService_Example newService) {
            this.bookService = newService; // ‚Üê C√ì TH·ªÇ THAY ƒê·ªîI!
        }
        
        // V·∫•n ƒë·ªÅ: Kh√¥ng bi·∫øt service n√†o ƒëang ƒë∆∞·ª£c d√πng!
    }
    
    // ‚úÖ IMMUTABLE FIELDS - KH√îNG TH·ªÇ THAY ƒê·ªîI
    static class ImmutableExample {
        private final BookService_Example bookService; // C√≥ 'final'
        
        public ImmutableExample(BookService_Example bookService) {
            this.bookService = bookService; // Ch·ªâ g√°n ƒë∆∞·ª£c 1 l·∫ßn!
        }
        
        // ‚úÖ Kh√¥ng th·ªÉ thay ƒë·ªïi dependency
        // public void changeService(BookService_Example newService) {
        //     this.bookService = newService; // ‚Üê COMPILE ERROR!
        // }
        
        // L·ª£i √≠ch: Lu√¥n bi·∫øt ch√≠nh x√°c service n√†o ƒëang ƒë∆∞·ª£c d√πng!
    }
    
    // ===============================================
    // 3. IoC CONTAINER QU·∫¢N L√ù DI NH∆Ø TH·∫æ N√ÄO?
    // ===============================================
    
    /**
     * üè≠ IoC CONTAINER = NH√Ä M√ÅY T·ª∞ ƒê·ªòNG
     * 
     * T∆∞·ªüng t∆∞·ª£ng m·ªôt nh√† m√°y √¥ t√¥:
     * 1. Nh√† m√°y bi·∫øt c√°ch l√†m t·ª´ng b·ªô ph·∫≠n: ƒë·ªông c∆°, b√°nh xe, gh·∫ø ng·ªìi
     * 2. Khi c·∫ßn l·∫Øp r√°p xe, nh√† m√°y t·ª± ƒë·ªông l·∫•y c√°c b·ªô ph·∫≠n
     * 3. L·∫Øp r√°p th√†nh xe ho√†n ch·ªânh v√† giao cho kh√°ch h√†ng
     * 
     * IoC Container ho·∫°t ƒë·ªông t∆∞∆°ng t·ª±:
     * 1. Container bi·∫øt c√°ch t·∫°o c√°c beans: BookService, BookRepository
     * 2. Khi c·∫ßn BookController, container t·ª± ƒë·ªông l·∫•y BookService
     * 3. Inject v√†o BookController v√† giao cho application s·ª≠ d·ª•ng
     */
    
    // B∆∞·ªõc 1: Container scan v√† t√¨m th·∫•y c√°c beans
    @Service // ‚Üê Container nh·∫≠n ra ƒë√¢y l√† bean
    static class BookService_Example {
        public String findAllBooks() {
            return "Danh s√°ch t·∫•t c·∫£ s√°ch";
        }
    }
    
    // B∆∞·ªõc 2: Container t·∫°o BookController v√† t·ª± ƒë·ªông inject BookService
    static class AutoWiredExample {
        private final BookService_Example bookService;
        
        // Container th·∫•y constructor n√†y, t·ª± ƒë·ªông inject BookService_Example
        public AutoWiredExample(BookService_Example bookService) {
            this.bookService = bookService;
            System.out.println("üè≠ IoC Container ƒë√£ inject BookService!");
        }
    }
    
    // ===============================================
    // 4. LOOSE COUPLING L√Ä G√å? - V√ç D·ª§ SINH ƒê·ªòNG
    // ===============================================
    
    /**
     * üé≠ TIGHT COUPLING vs LOOSE COUPLING
     * 
     * V√≠ d·ª• th·ª±c t·∫ø:
     * 
     * TIGHT COUPLING (K·∫øt d√≠nh ch·∫∑t):
     * - iPhone c≈© ch·ªâ d√πng ƒë∆∞·ª£c s·∫°c Lightning
     * - N·∫øu h·ªèng s·∫°c ph·∫£i mua ch√≠nh h√£ng, ƒë·∫Øt ƒë·ªè
     * - Kh√¥ng th·ªÉ d√πng s·∫°c c·ªßa h√£ng kh√°c
     * 
     * LOOSE COUPLING (K·∫øt n·ªëi l·ªèng):
     * - Laptop hi·ªán ƒë·∫°i d√πng USB-C
     * - C√≥ th·ªÉ d√πng s·∫°c c·ªßa nhi·ªÅu h√£ng kh√°c nhau
     * - Linh ho·∫°t, ti·∫øt ki·ªám, d·ªÖ thay th·∫ø
     */
    
    // ‚ùå TIGHT COUPLING - K·∫æT D√çNH CH·∫∂T
    static class TightCouplingExample {
        private GmailSender emailSender; // C·ª©ng nh·∫Øc - ch·ªâ d√πng Gmail
        
        public TightCouplingExample() {
            this.emailSender = new GmailSender(); // ‚Üê K·∫æT D√çNH CH·∫∂T!
            // Mu·ªën ƒë·ªïi sang Outlook? Ph·∫£i s·ª≠a code!
        }
        
        public void sendNotification(String message) {
            emailSender.sendEmail(message); // Ch·ªâ c√≥ th·ªÉ g·ª≠i qua Gmail
        }
    }
    
    // ‚úÖ LOOSE COUPLING - K·∫æT N·ªêI L·ªéNG
    static class LooseCouplingExample {
        private EmailSender emailSender; // Linh ho·∫°t - d√πng interface
        
        // C√≥ th·ªÉ inject b·∫•t k·ª≥ implementation n√†o c·ªßa EmailSender
        public LooseCouplingExample(EmailSender emailSender) {
            this.emailSender = emailSender; // ‚Üê K·∫æT N·ªêI L·ªéNG!
            // C√≥ th·ªÉ l√† Gmail, Outlook, SMS, hay Mock ƒë·ªÉ test
        }
        
        public void sendNotification(String message) {
            emailSender.sendEmail(message); // C√≥ th·ªÉ g·ª≠i qua nhi·ªÅu c√°ch
        }
    }
    
    // Interface cho EmailSender
    interface EmailSender {
        void sendEmail(String message);
    }
    
    // C√°c implementations kh√°c nhau
    static class GmailSender implements EmailSender {
        public void sendEmail(String message) {
            System.out.println("üìß G·ª≠i qua Gmail: " + message);
        }
    }
    
    static class OutlookSender implements EmailSender {
        public void sendEmail(String message) {
            System.out.println("üìß G·ª≠i qua Outlook: " + message);
        }
    }
    
    static class SMSSender implements EmailSender {
        public void sendEmail(String message) {
            System.out.println("üì± G·ª≠i qua SMS: " + message);
        }
    }
    
    static class MockSender implements EmailSender {
        public void sendEmail(String message) {
            System.out.println("üß™ Mock sender cho testing: " + message);
        }
    }
    
    // ===============================================
    // 5. V√ç D·ª§ TRONG D·ª∞ √ÅN LIBRARY MANAGEMENT
    // ===============================================
    
    /**
     * üìö C√ÅCH DI ƒê∆Ø·ª¢C √ÅP D·ª§NG TRONG D·ª∞ √ÅN C·ª¶A CH√öNG TA
     * 
     * 1. BookController PH·ª§ THU·ªòC BookService (dependency)
     * 2. BookService PH·ª§ THU·ªòC BookRepository (dependency)
     * 3. BookRepository PH·ª§ THU·ªòC Database (dependency)
     * 
     * Spring IoC Container:
     * - T·ª± ƒë·ªông t·∫°o BookRepository
     * - Inject BookRepository v√†o BookService
     * - Inject BookService v√†o BookController
     * - T·∫•t c·∫£ ƒë·ªÅu s·ª≠ d·ª•ng immutable fields (final)
     */
    
    // Trong d·ª± √°n th·ª±c t·∫ø:
    /*
    @RestController
    public class BookController {
        private final BookService bookService; // ‚Üê DEPENDENCY + IMMUTABLE
        
        // Constructor injection
        public BookController(BookService bookService) {
            this.bookService = bookService; // ‚Üê DI in action!
        }
    }
    
    @Service
    public class BookService {
        private final BookRepository bookRepository; // ‚Üê DEPENDENCY + IMMUTABLE
        
        // Constructor injection
        public BookService(BookRepository bookRepository) {
            this.bookRepository = bookRepository; // ‚Üê DI in action!
        }
    }
    */
}

/**
 * üéØ T√ìM T·∫ÆT C√ÅC KH√ÅI NI·ªÜM:
 * 
 * 1. üîó DEPENDENCY: Class A c·∫ßn Class B ‚Üí A ph·ª• thu·ªôc B
 *    VD: BookController c·∫ßn BookService ƒë·ªÉ ho·∫°t ƒë·ªông
 * 
 * 2. üîí IMMUTABLE FIELDS: D√πng 'final', kh√¥ng th·ªÉ thay ƒë·ªïi sau khi g√°n
 *    VD: private final BookService service; (nh∆∞ s·ªë CMND)
 * 
 * 3. üè≠ IoC CONTAINER: "Nh√† m√°y" t·ª± ƒë·ªông t·∫°o v√† inject dependencies
 *    - Scan ‚Üí Create ‚Üí Store ‚Üí Inject
 * 
 * 4. üé≠ LOOSE COUPLING: S·ª≠ d·ª•ng interfaces, linh ho·∫°t thay ƒë·ªïi implementations
 *    VD: Laptop d√πng USB-C (nhi·ªÅu lo·∫°i s·∫°c) thay v√¨ Lightning (1 lo·∫°i)
 * 
 * üí° T·∫§T C·∫¢ K·∫æT H·ª¢P L·∫†I:
 * DI + IoC + Immutable + Loose Coupling = Code d·ªÖ test, maintain, flexible!
 */
