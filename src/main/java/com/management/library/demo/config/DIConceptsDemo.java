package com.management.library.demo.config;

import com.management.library.demo.entity.Book;
import com.management.library.demo.repository.BookRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;
import org.springframework.context.annotation.Scope;

/**
 * Demo Configuration ƒë·ªÉ minh h·ªça c√°c kh√°i ni·ªám DI v√† Bean Scopes
 * 
 * üîç DEPENDENCY INJECTION (DI) l√† g√¨?
 * - DI l√† m·ªôt design pattern gi√∫p qu·∫£n l√Ω dependencies gi·ªØa c√°c objects
 * - Thay v√¨ object t·ª± t·∫°o dependencies, ch√∫ng s·∫Ω ƒë∆∞·ª£c "inject" t·ª´ b√™n ngo√†i
 * - Spring Framework s·ª≠ d·ª•ng IoC (Inversion of Control) container ƒë·ªÉ qu·∫£n l√Ω DI
 */
@Configuration
public class DIConceptsDemo {

    // ===============================================
    // 1. C√ÅC C√ÅCH TRI·ªÇN KHAI DI TRONG SPRING
    // ===============================================

    /**
     * üìç Method 1: Constructor Injection (KHUY√äN D√ôNG)
     * - Inject dependencies qua constructor
     * - ƒê·∫£m b·∫£o dependencies ƒë∆∞·ª£c kh·ªüi t·∫°o tr∆∞·ªõc khi object ƒë∆∞·ª£c s·ª≠ d·ª•ng
     * - Immutable dependencies (final fields)
     * - D·ªÖ test (c√≥ th·ªÉ mock dependencies)
     */
    public static class ConstructorInjectionExample {
        private final BookRepository repository;
        private final BookValidator validator;

        // Constructor injection - Spring t·ª± ƒë·ªông inject c√°c dependencies
        public ConstructorInjectionExample(BookRepository repository, 
                                         @Qualifier("primaryValidator") BookValidator validator) {
            this.repository = repository;
            this.validator = validator;
        }
    }

    /**
     * üìç Method 2: Field Injection (KH√îNG KHUY√äN D√ôNG)
     * - Inject tr·ª±c ti·∫øp v√†o field
     * - D·ªÖ vi·∫øt nh∆∞ng kh√≥ test
     * - Kh√¥ng th·ªÉ t·∫°o immutable fields
     */
    public static class FieldInjectionExample {
        @Autowired
        private BookRepository repository;
        
        @Autowired
        @Qualifier("secondaryValidator")
        private BookValidator validator;
    }

    /**
     * üìç Method 3: Setter Injection
     * - Inject qua setter methods
     * - Cho ph√©p optional dependencies
     * - C√≥ th·ªÉ thay ƒë·ªïi dependencies sau khi object ƒë∆∞·ª£c t·∫°o
     */
    public static class SetterInjectionExample {
        private BookRepository repository;
        private BookValidator validator;

        @Autowired
        public void setRepository(BookRepository repository) {
            this.repository = repository;
        }

        @Autowired(required = false) // Optional dependency
        public void setValidator(@Qualifier("optionalValidator") BookValidator validator) {
            this.validator = validator;
        }
    }

    // ===============================================
    // 2. BEAN SCOPES V√Ä V√íNG ƒê·ªúI
    // ===============================================

    /**
     * üîÑ SINGLETON SCOPE (Default)
     * - Ch·ªâ c√≥ 1 instance duy nh·∫•t trong to√†n b·ªô Spring container
     * - Instance ƒë∆∞·ª£c t·∫°o khi container kh·ªüi ƒë·ªông
     * - ƒê∆∞·ª£c chia s·∫ª cho t·∫•t c·∫£ c√°c requests
     * - Ph√π h·ª£p cho stateless services
     */
    @Bean
    @Scope("singleton") // Ho·∫∑c @Scope(ConfigurableBeanFactory.SCOPE_SINGLETON)
    public BookValidator singletonValidator() {
        System.out.println("üèóÔ∏è Creating SINGLETON BookValidator instance");
        return new BookValidator("SingletonValidator");
    }

    /**
     * üÜï PROTOTYPE SCOPE
     * - T·∫°o instance m·ªõi m·ªói khi ƒë∆∞·ª£c request
     * - Kh√¥ng ƒë∆∞·ª£c cached
     * - Spring kh√¥ng qu·∫£n l√Ω lifecycle sau khi t·∫°o
     * - Ph√π h·ª£p cho stateful objects
     */
    @Bean
    @Scope("prototype") // Ho·∫∑c @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)
    public BookValidator prototypeValidator() {
        System.out.println("üÜï Creating PROTOTYPE BookValidator instance");
        return new BookValidator("PrototypeValidator-" + System.currentTimeMillis());
    }

    /**
     * üåê REQUEST SCOPE (Web applications only)
     * - T·∫°o instance m·ªõi cho m·ªói HTTP request
     * - Instance b·ªã destroy khi request k·∫øt th√∫c
     * - Ch·ªâ available trong web context
     */
    @Bean
    @Scope("request") // Ho·∫∑c @Scope(WebApplicationContext.SCOPE_REQUEST)
    public BookValidator requestValidator() {
        System.out.println("üåê Creating REQUEST scope BookValidator instance");
        return new BookValidator("RequestValidator-" + Thread.currentThread().getName());
    }

    /**
     * üë§ SESSION SCOPE (Web applications only)
     * - T·∫°o instance m·ªõi cho m·ªói HTTP session
     * - Instance t·ªìn t·∫°i su·ªët session c·ªßa user
     * - B·ªã destroy khi session expire
     */
    @Bean
    @Scope("session") // Ho·∫∑c @Scope(WebApplicationContext.SCOPE_SESSION)
    public BookValidator sessionValidator() {
        System.out.println("üë§ Creating SESSION scope BookValidator instance");
        return new BookValidator("SessionValidator");
    }

    /**
     * üîß APPLICATION SCOPE
     * - T∆∞∆°ng t·ª± Singleton nh∆∞ng ·ªü m·ª©c ServletContext
     * - M·ªôt instance cho to√†n b·ªô web application
     */
    @Bean
    @Scope("application") // Ho·∫∑c @Scope(WebApplicationContext.SCOPE_APPLICATION)
    public BookValidator applicationValidator() {
        System.out.println("üîß Creating APPLICATION scope BookValidator instance");
        return new BookValidator("ApplicationValidator");
    }

    // ===============================================
    // 3. QUALIFIER V√Ä PRIMARY
    // ===============================================

    /**
     * üéØ @Primary: Bean ƒë∆∞·ª£c ∆∞u ti√™n khi c√≥ nhi·ªÅu implementations
     */
    @Bean
    @Primary
    public BookValidator primaryValidator() {
        return new BookValidator("PrimaryValidator");
    }

    /**
     * üè∑Ô∏è @Qualifier: Ch·ªâ ƒë·ªãnh c·ª• th·ªÉ bean n√†o ƒë∆∞·ª£c inject
     */
    @Bean
    @Qualifier("secondaryValidator")
    public BookValidator secondaryValidator() {
        return new BookValidator("SecondaryValidator");
    }

    @Bean
    @Qualifier("optionalValidator")
    public BookValidator optionalValidator() {
        return new BookValidator("OptionalValidator");
    }

    // ===============================================
    // 4. BEAN LIFECYCLE CALLBACKS
    // ===============================================

    /**
     * üîÑ Bean v·ªõi lifecycle callbacks
     */
    @Bean(initMethod = "init", destroyMethod = "cleanup")
    public BookValidator lifecycleValidator() {
        return new BookValidator("LifecycleValidator");
    }

    // Demo class cho validators
    public static class BookValidator {
        private final String name;

        public BookValidator(String name) {
            this.name = name;
            System.out.println("üìö BookValidator constructor called: " + name);
        }

        public void init() {
            System.out.println("üöÄ Init method called for: " + name);
        }

        public void cleanup() {
            System.out.println("üßπ Cleanup method called for: " + name);
        }

        public boolean validate(Book book) {
            System.out.println("‚úÖ Validating book with: " + name);
            return book != null && book.getTitle() != null;
        }

        public String getName() {
            return name;
        }
    }
}
