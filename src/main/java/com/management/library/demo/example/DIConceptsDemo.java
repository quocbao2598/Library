package com.management.library.demo.example;

/**
 * üéØ DEMO TH·ª∞C T·∫æ: TIGHT COUPLING VS LOOSE COUPLING
 * 
 * File n√†y minh h·ªça s·ª± kh√°c bi·ªát gi·ªØa tight coupling v√† loose coupling
 * ƒë·ªÉ gi√∫p hi·ªÉu r√µ h∆°n v·ªÅ l·ª£i √≠ch c·ªßa Dependency Injection
 */

// ===============================================
// 1. V√ç D·ª§ TIGHT COUPLING (X·∫§U)
// ===============================================

/**
 * ‚ùå TIGHT COUPLING EXAMPLE
 * EmailService b·ªã "k·∫øt d√≠nh" ch·∫∑t ch·∫Ω v·ªõi GmailSender
 */
class TightCouplingExample {
    
    // Concrete class - kh√¥ng linh ho·∫°t
    static class GmailSender {
        public void sendEmail(String to, String message) {
            System.out.println("üìß Sending via Gmail to: " + to);
            System.out.println("üíå Message: " + message);
            // Logic g·ª≠i email qua Gmail API
        }
    }
    
    // ‚ùå BAD: EmailService ph·ª• thu·ªôc tr·ª±c ti·∫øp v√†o GmailSender
    static class EmailService {
        private GmailSender sender; // DEPENDENCY - nh∆∞ng TIGHT COUPLING
        
        public EmailService() {
            // T·ª± t·∫°o dependency - KH√îNG LINH HO·∫†T
            this.sender = new GmailSender();
        }
        
        public void sendWelcomeEmail(String userEmail) {
            sender.sendEmail(userEmail, "Welcome to Library System!");
        }
        
        // ‚ùå V·∫§N ƒê·ªÄ:
        // - Mu·ªën ƒë·ªïi sang Outlook? Ph·∫£i s·ª≠a code!
        // - Mu·ªën test m√† kh√¥ng g·ª≠i email th·∫≠t? KH√îNG TH·ªÇ!
        // - Mu·ªën g·ª≠i SMS thay v√¨ email? Ph·∫£i vi·∫øt l·∫°i class!
    }
}

// ===============================================
// 2. V√ç D·ª§ LOOSE COUPLING (T·ªêT)
// ===============================================

/**
 * ‚úÖ LOOSE COUPLING EXAMPLE  
 * NotificationService ch·ªâ ph·ª• thu·ªôc v√†o interface
 */
class LooseCouplingExample {
    
    // INTERFACE - T·∫°o abstraction
    interface MessageSender {
        void sendMessage(String to, String message);
    }
    
    // Concrete implementations
    static class GmailSender implements MessageSender {
        @Override
        public void sendMessage(String to, String message) {
            System.out.println("üìß Gmail: Sending to " + to + " - " + message);
        }
    }
    
    static class OutlookSender implements MessageSender {
        @Override
        public void sendMessage(String to, String message) {
            System.out.println("üì® Outlook: Sending to " + to + " - " + message);
        }
    }
    
    static class SMSSender implements MessageSender {
        @Override
        public void sendMessage(String to, String message) {
            System.out.println("üì± SMS: Sending to " + to + " - " + message);
        }
    }
    
    static class MockSender implements MessageSender {
        @Override
        public void sendMessage(String to, String message) {
            System.out.println("üß™ MOCK: Would send to " + to + " - " + message);
        }
    }
    
    // ‚úÖ GOOD: NotificationService ch·ªâ ph·ª• thu·ªôc v√†o interface
    static class NotificationService {
        private final MessageSender sender; // DEPENDENCY - nh∆∞ng LOOSE COUPLING
        
        // Constructor injection - nh·∫≠n dependency t·ª´ b√™n ngo√†i
        public NotificationService(MessageSender sender) {
            this.sender = sender; // IMMUTABLE FIELD
        }
        
        public void sendWelcomeMessage(String userContact) {
            sender.sendMessage(userContact, "Welcome to Library System!");
        }
        
        // ‚úÖ L·ª¢I √çCH:
        // - Mu·ªën ƒë·ªïi implementation? Ch·ªâ c·∫ßn inject implementation kh√°c!
        // - Mu·ªën test? Inject MockSender!
        // - Mu·ªën g·ª≠i SMS? Inject SMSSender!
        // - Kh√¥ng c·∫ßn s·ª≠a code c·ªßa NotificationService!
    }
}

// ===============================================
// 3. DEMO IMMUTABLE VS MUTABLE FIELDS
// ===============================================

/**
 * üîí DEMO: IMMUTABLE vs MUTABLE FIELDS
 */
class ImmutableVsMutableExample {
    
    static class DatabaseConnection {
        private String url;
        
        public DatabaseConnection(String url) {
            this.url = url;
        }
        
        public String getUrl() { return url; }
        public void setUrl(String url) { this.url = url; }
    }
    
    // ‚ùå MUTABLE FIELDS - C√≥ th·ªÉ thay ƒë·ªïi
    static class MutableService {
        private DatabaseConnection connection; // Kh√¥ng c√≥ 'final'
        
        public MutableService(DatabaseConnection connection) {
            this.connection = connection;
        }
        
        public void riskyMethod() {
            // ‚ùå NGUY HI·ªÇM: Ai ƒë√≥ c√≥ th·ªÉ thay ƒë·ªïi connection
            this.connection = null; // C√≥ th·ªÉ g√¢y NullPointerException
            this.connection = new DatabaseConnection("wrong-url");
        }
        
        public void doWork() {
            // Kh√¥ng ch·∫Øc ch·∫Øn connection c√≤n ƒë√∫ng kh√¥ng
            System.out.println("Working with: " + connection.getUrl());
        }
    }
    
    // ‚úÖ IMMUTABLE FIELDS - Kh√¥ng th·ªÉ thay ƒë·ªïi
    static class ImmutableService {
        private final DatabaseConnection connection; // C√≥ 'final'
        
        public ImmutableService(DatabaseConnection connection) {
            this.connection = connection;
        }
        
        public void safeMethod() {
            // ‚úÖ AN TO√ÄN: Kh√¥ng th·ªÉ thay ƒë·ªïi connection
            // this.connection = null; // ‚ùå COMPILE ERROR!
            // this.connection = new DatabaseConnection("wrong-url"); // ‚ùå COMPILE ERROR!
        }
        
        public void doWork() {
            // Ch·∫Øc ch·∫Øn connection lu√¥n ƒë√∫ng nh∆∞ ban ƒë·∫ßu
            System.out.println("Safely working with: " + connection.getUrl());
        }
    }
}

// ===============================================
// 4. DEMO: TR∆Ø·ªöC V√Ä SAU KHI C√ì IoC CONTAINER
// ===============================================

/**
 * üè≠ DEMO: Manual vs IoC Container
 */
class ManualVsIoCExample {
    
    // ‚ùå TR∆Ø·ªöC KHI C√ì IoC - T·ª± qu·∫£n l√Ω t·∫•t c·∫£
    static class ManualApproach {
        public static void main(String[] args) {
            System.out.println("=== ‚ùå MANUAL APPROACH ===");
            
            // Ph·∫£i t·ª± t·∫°o t·∫•t c·∫£ dependencies theo ƒë√∫ng th·ª© t·ª±
            LooseCouplingExample.GmailSender sender = new LooseCouplingExample.GmailSender();
            LooseCouplingExample.NotificationService notificationService = 
                new LooseCouplingExample.NotificationService(sender);
            
            // N·∫øu c√≥ nhi·ªÅu dependencies ph·ª©c t·∫°p:
            // DatabaseConnection db = new DatabaseConnection("url");
            // UserRepository userRepo = new UserRepository(db);
            // UserService userService = new UserService(userRepo, notificationService);
            // UserController userController = new UserController(userService);
            
            notificationService.sendWelcomeMessage("user@example.com");
        }
    }
    
    // ‚úÖ V·ªöI IoC - Spring Container t·ª± qu·∫£n l√Ω
    /*
     * Spring t·ª± ƒë·ªông l√†m:
     * 
     * @Component
     * class GmailSender implements MessageSender { ... }
     * 
     * @Service 
     * class NotificationService {
     *     public NotificationService(MessageSender sender) { ... }
     * }
     * 
     * Spring Container s·∫Ω:
     * 1. T·∫°o GmailSender
     * 2. T·∫°o NotificationService v√† inject GmailSender
     * 3. L∆∞u trong container
     * 4. Inject khi c·∫ßn thi·∫øt
     */
}

// ===============================================
// 5. DEMO TESTING V·ªöI V√Ä KH√îNG V·ªöI DI
// ===============================================

/**
 * üß™ DEMO: Testing v·ªõi v√† kh√¥ng v·ªõi DI
 */
class TestingExample {
    
    // ‚ùå KH√ì TEST - Tight coupling
    static class HardToTestService {
        private LooseCouplingExample.GmailSender sender;
        
        public HardToTestService() {
            this.sender = new LooseCouplingExample.GmailSender(); // Lu√¥n g·ª≠i email th·∫≠t
        }
        
        public boolean sendWelcomeEmail(String email) {
            sender.sendMessage(email, "Welcome!");
            return true; // L√†m sao bi·∫øt c√≥ g·ª≠i th√†nh c√¥ng?
        }
        
        // ‚ùå V·∫§N ƒê·ªÄ KHI TEST:
        // - M·ªói l·∫ßn test s·∫Ω g·ª≠i email th·∫≠t
        // - C·∫ßn internet ƒë·ªÉ test
        // - Kh√¥ng ki·ªÉm so√°t ƒë∆∞·ª£c k·∫øt qu·∫£
        // - Test ch·∫≠m v√† kh√¥ng ·ªïn ƒë·ªãnh
    }
    
    // ‚úÖ D·ªÑ TEST - Dependency injection
    static class EasyToTestService {
        private final LooseCouplingExample.MessageSender sender;
        
        public EasyToTestService(LooseCouplingExample.MessageSender sender) {
            this.sender = sender;
        }
        
        public boolean sendWelcomeEmail(String email) {
            sender.sendMessage(email, "Welcome!");
            return true;
        }
        
        // ‚úÖ L·ª¢I √çCH KHI TEST:
        // - Inject MockSender ƒë·ªÉ test
        // - Kh√¥ng c·∫ßn internet
        // - Ki·ªÉm so√°t ƒë∆∞·ª£c behavior
        // - Test nhanh v√† ·ªïn ƒë·ªãnh
    }
    
    // Unit test example (kh√¥ng ch·∫°y ƒë∆∞·ª£c ·ªü ƒë√¢y, ch·ªâ ƒë·ªÉ minh h·ªça)
    /*
    @Test
    public void testSendWelcomeEmail() {
        // Arrange
        MessageSender mockSender = mock(MessageSender.class);
        EasyToTestService service = new EasyToTestService(mockSender);
        
        // Act
        boolean result = service.sendWelcomeEmail("test@example.com");
        
        // Assert
        assertTrue(result);
        verify(mockSender).sendMessage("test@example.com", "Welcome!");
    }
    */
}

// ===============================================
// 6. MAIN CLASS ƒê·ªÇ CH·∫†Y DEMO
// ===============================================

/**
 * üöÄ CH·∫†Y DEMO ƒê·ªÇ XEM S·ª∞ KH√ÅC BI·ªÜT
 */
public class DIConceptsDemo {
    
    public static void main(String[] args) {
        System.out.println("üéØ DEPENDENCY INJECTION CONCEPTS DEMO");
        System.out.println("=====================================");
        
        demonstrateTightCoupling();
        System.out.println();
        
        demonstrateLooseCoupling();
        System.out.println();
        
        demonstrateImmutableFields();
        System.out.println();
        
        demonstrateFlexibility();
    }
    
    private static void demonstrateTightCoupling() {
        System.out.println("‚ùå TIGHT COUPLING DEMO:");
        
        TightCouplingExample.EmailService emailService = 
            new TightCouplingExample.EmailService();
        emailService.sendWelcomeEmail("user@example.com");
        
        System.out.println("üö´ V·∫•n ƒë·ªÅ: Ch·ªâ c√≥ th·ªÉ g·ª≠i qua Gmail, kh√¥ng linh ho·∫°t!");
    }
    
    private static void demonstrateLooseCoupling() {
        System.out.println("‚úÖ LOOSE COUPLING DEMO:");
        
        // C√≥ th·ªÉ d·ªÖ d√†ng thay ƒë·ªïi implementation
        LooseCouplingExample.MessageSender gmailSender = 
            new LooseCouplingExample.GmailSender();
        LooseCouplingExample.NotificationService service1 = 
            new LooseCouplingExample.NotificationService(gmailSender);
        service1.sendWelcomeMessage("user@example.com");
        
        // ƒê·ªïi sang Outlook m√† kh√¥ng c·∫ßn s·ª≠a NotificationService
        LooseCouplingExample.MessageSender outlookSender = 
            new LooseCouplingExample.OutlookSender();
        LooseCouplingExample.NotificationService service2 = 
            new LooseCouplingExample.NotificationService(outlookSender);
        service2.sendWelcomeMessage("user@example.com");
        
        // ƒê·ªïi sang SMS
        LooseCouplingExample.MessageSender smsSender = 
            new LooseCouplingExample.SMSSender();
        LooseCouplingExample.NotificationService service3 = 
            new LooseCouplingExample.NotificationService(smsSender);
        service3.sendWelcomeMessage("0901234567");
        
        System.out.println("‚ú® L·ª£i √≠ch: Linh ho·∫°t, d·ªÖ thay ƒë·ªïi implementation!");
    }
    
    private static void demonstrateImmutableFields() {
        System.out.println("üîí IMMUTABLE FIELDS DEMO:");
        
        ImmutableVsMutableExample.DatabaseConnection connection = 
            new ImmutableVsMutableExample.DatabaseConnection("postgresql://localhost:5432");
        
        ImmutableVsMutableExample.ImmutableService immutableService = 
            new ImmutableVsMutableExample.ImmutableService(connection);
        immutableService.doWork();
        
        // Th·ª≠ v·ªõi mutable service
        ImmutableVsMutableExample.MutableService mutableService = 
            new ImmutableVsMutableExample.MutableService(connection);
        mutableService.doWork();
        mutableService.riskyMethod(); // C√≥ th·ªÉ g√¢y l·ªói
        
        try {
            mutableService.doWork(); // C√≥ th·ªÉ crash
        } catch (Exception e) {
            System.out.println("üí• L·ªói do mutable field: " + e.getMessage());
        }
        
        System.out.println("üõ°Ô∏è Immutable fields gi√∫p code an to√†n h∆°n!");
    }
    
    private static void demonstrateFlexibility() {
        System.out.println("üé≠ FLEXIBILITY DEMO - Testing vs Production:");
        
        // Production: d√πng real implementation
        LooseCouplingExample.MessageSender productionSender = 
            new LooseCouplingExample.GmailSender();
        LooseCouplingExample.NotificationService productionService = 
            new LooseCouplingExample.NotificationService(productionSender);
        System.out.println("üè≠ Production mode:");
        productionService.sendWelcomeMessage("customer@example.com");
        
        // Testing: d√πng mock implementation
        LooseCouplingExample.MessageSender mockSender = 
            new LooseCouplingExample.MockSender();
        LooseCouplingExample.NotificationService testService = 
            new LooseCouplingExample.NotificationService(mockSender);
        System.out.println("üß™ Testing mode:");
        testService.sendWelcomeMessage("test@example.com");
        
        System.out.println("üöÄ C√πng m·ªôt code, kh√°c nhau implementation!");
    }
}
