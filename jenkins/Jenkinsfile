pipeline {
    agent any
    
    environment {
        DOCKER_HUB_CREDENTIALS = credentials('docker-hub-credentials')
        DOCKER_IMAGE = 'baoquoc/library-management'
        POSTGRES_CREDENTIALS = credentials('postgres-credentials')
        
        // Build variables
        MAVEN_OPTS = '-Dmaven.test.failure.ignore=true'
        BUILD_NUMBER_TAG = "${BUILD_NUMBER}"
        GIT_COMMIT_SHORT = "${GIT_COMMIT[0..7]}"
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'üîÑ Checking out code from repository...'
                checkout scm
                
                script {
                    // Get commit information
                    env.GIT_COMMIT_MSG = sh(
                        script: 'git log -1 --pretty=%B',
                        returnStdout: true
                    ).trim()
                }
            }
        }
        
        stage('Environment Info') {
            steps {
                echo 'üìã Environment Information:'
                sh '''
                    echo "Java Version:"
                    java -version
                    echo "Maven Version:"
                    mvn -version
                    echo "Docker Version:"
                    docker --version
                    echo "Git Commit: ${GIT_COMMIT}"
                    echo "Git Commit Message: ${GIT_COMMIT_MSG}"
                    echo "Build Number: ${BUILD_NUMBER}"
                '''
            }
        }
        
        stage('Test') {
            steps {
                echo 'üß™ Running unit tests...'
                sh '''
                    mvn clean test -Dspring.profiles.active=test
                '''
            }
            post {
                always {
                    // Publish test results
                    publishTestResults testResultsPattern: 'target/surefire-reports/*.xml'
                    
                    // Archive test reports
                    archiveArtifacts artifacts: 'target/surefire-reports/**', fingerprint: true
                }
                failure {
                    echo '‚ùå Tests failed! Check the test reports.'
                }
                success {
                    echo '‚úÖ All tests passed!'
                }
            }
        }
        
        stage('Code Quality Analysis') {
            parallel {
                stage('Checkstyle') {
                    steps {
                        echo 'üìù Running Checkstyle analysis...'
                        sh 'mvn checkstyle:checkstyle || true'
                    }
                    post {
                        always {
                            recordIssues enabledForFailure: true, tools: [checkStyle()]
                        }
                    }
                }
                
                stage('SpotBugs') {
                    steps {
                        echo 'üîç Running SpotBugs analysis...'
                        sh 'mvn spotbugs:spotbugs || true'
                    }
                    post {
                        always {
                            recordIssues enabledForFailure: true, tools: [spotBugs()]
                        }
                    }
                }
            }
        }
        
        stage('Build Application') {
            steps {
                echo 'üèóÔ∏è Building Spring Boot application...'
                sh '''
                    mvn clean package -DskipTests
                    
                    # Verify JAR file was created
                    if [ -f target/*.jar ]; then
                        echo "‚úÖ JAR file created successfully"
                        ls -la target/*.jar
                    else
                        echo "‚ùå JAR file not found!"
                        exit 1
                    fi
                '''
            }
            post {
                success {
                    archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                echo 'üê≥ Building Docker image...'
                script {
                    // Build image with multiple tags
                    def imageTags = [
                        "${DOCKER_IMAGE}:${BUILD_NUMBER_TAG}",
                        "${DOCKER_IMAGE}:${GIT_COMMIT_SHORT}",
                        "${DOCKER_IMAGE}:latest"
                    ]
                    
                    imageTags.each { tag ->
                        sh "docker build -t ${tag} ."
                    }
                    
                    // Store image tags for later use
                    env.DOCKER_TAGS = imageTags.join(' ')
                }
            }
        }
        
        stage('Security Scan') {
            steps {
                echo 'üîí Running security scan with Trivy...'
                sh '''
                    # Install Trivy if not available
                    if ! command -v trivy &> /dev/null; then
                        echo "Installing Trivy..."
                        wget -qO- https://github.com/aquasecurity/trivy/releases/latest/download/trivy_Linux-64bit.tar.gz | tar xz
                        sudo mv trivy /usr/local/bin/
                    fi
                    
                    # Scan the Docker image
                    trivy image --format table --exit-code 0 ${DOCKER_IMAGE}:${BUILD_NUMBER_TAG}
                    
                    # Generate JSON report
                    trivy image --format json --output trivy-report.json ${DOCKER_IMAGE}:${BUILD_NUMBER_TAG}
                '''
            }
            post {
                always {
                    archiveArtifacts artifacts: 'trivy-report.json', fingerprint: true
                }
            }
        }
        
        stage('Push to Registry') {
            when {
                anyOf {
                    branch 'main'
                    branch 'master'
                    branch 'develop'
                }
            }
            steps {
                echo 'üì§ Pushing Docker image to registry...'
                script {
                    docker.withRegistry('https://index.docker.io/v1/', 'docker-hub-credentials') {
                        env.DOCKER_TAGS.split(' ').each { tag ->
                            echo "Pushing ${tag}..."
                            sh "docker push ${tag}"
                        }
                    }
                }
            }
        }
        
        stage('Deploy to Staging') {
            when {
                anyOf {
                    branch 'develop'
                    branch 'main'
                }
            }
            steps {
                echo 'üöÄ Deploying to staging environment...'
                script {
                    // Deploy using docker-compose
                    sh '''
                        # Create staging deployment
                        cp docker-compose.prod.yml docker-compose.staging.yml
                        
                        # Update image tag in staging compose file
                        sed -i "s|image: .*|image: ${DOCKER_IMAGE}:${BUILD_NUMBER_TAG}|g" docker-compose.staging.yml
                        
                        # Deploy to staging
                        docker-compose -f docker-compose.staging.yml down || true
                        docker-compose -f docker-compose.staging.yml up -d
                        
                        # Wait for service to be healthy
                        echo "Waiting for application to start..."
                        sleep 30
                        
                        # Health check
                        if curl -f http://localhost:8080/actuator/health; then
                            echo "‚úÖ Staging deployment successful!"
                        else
                            echo "‚ùå Staging deployment failed!"
                            exit 1
                        fi
                    '''
                }
            }
        }
    }
    
    post {
        always {
            echo 'üßπ Cleaning up workspace...'
            
            // Clean up Docker images to save space
            sh '''
                # Remove dangling images
                docker image prune -f || true
                
                # Remove old images (keep last 5 builds)
                docker images ${DOCKER_IMAGE} --format "table {{.Tag}}" | tail -n +6 | xargs -I {} docker rmi ${DOCKER_IMAGE}:{} || true
            '''
            
            // Clean workspace
            cleanWs()
        }
        
        success {
            echo 'üéâ Pipeline completed successfully!'
            
            // Send success notification
            script {
                def message = """
                ‚úÖ **Build Successful** - Library Management System
                
                **Branch:** ${env.BRANCH_NAME}
                **Build:** #${env.BUILD_NUMBER}
                **Commit:** ${env.GIT_COMMIT_SHORT}
                **Message:** ${env.GIT_COMMIT_MSG}
                **Image:** ${env.DOCKER_IMAGE}:${env.BUILD_NUMBER_TAG}
                
                **Duration:** ${currentBuild.durationString}
                """
                
                // Add notification steps here (Slack, Email, etc.)
                echo message
            }
        }
        
        failure {
            echo '‚ùå Pipeline failed!'
            
            // Send failure notification
            script {
                def message = """
                ‚ùå **Build Failed** - Library Management System
                
                **Branch:** ${env.BRANCH_NAME}
                **Build:** #${env.BUILD_NUMBER}
                **Stage:** ${env.STAGE_NAME}
                **Commit:** ${env.GIT_COMMIT_SHORT}
                
                **Check logs:** ${env.BUILD_URL}
                """
                
                // Add notification steps here
                echo message
            }
        }
        
        unstable {
            echo '‚ö†Ô∏è Pipeline completed with warnings!'
        }
    }
}
